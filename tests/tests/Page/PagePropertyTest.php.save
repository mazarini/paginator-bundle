<?php

/*
 * Copyright (C) 2023 Mazarini <mazarini@protonmail.com>.
 * This file is part of mazarini/paginator-bundle.
 *
 * mazarini/paginator-bundle is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * mazarini/paginator-bundle is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 */

namespace App\Tests\Page;

use Mazarini\PaginatorBundle\Page\CurrentPage;
use Mazarini\PaginatorBundle\Page\FirstPage;
use Mazarini\PaginatorBundle\Page\LastPage;
use Mazarini\PaginatorBundle\Page\NextPage;
use Mazarini\PaginatorBundle\Page\NumberPage;
use Mazarini\PaginatorBundle\Page\PreviousPage;
use Mazarini\PaginatorBundle\Pager\PageManager;
use Mazarini\PaginatorBundle\Pager\Pager;
use PHPUnit\Framework\TestCase;

class PagePropertyTest extends TestCase
{
    private Pager $pages;
    private FirstPage $first;
    private NumberPage $number;
    private CurrentPage $current;
    private PreviousPage $previous;
    private NextPage $next;
    private LastPage $last;

    private \ReflectionProperty $reflectionProperty;

    protected function setup(): void
    {
        FirstPage::setLabel('first');
        PreviousPage::setLabel('previous');
        NextPage::setLabel('next');
        LastPage::setLabel('last');
        $this->pages = new Pager(1);
        $reflectionClass = new \ReflectionClass(PageManager::class);
        $this->reflectionProperty = $reflectionClass->getProperty('currentPage');
        $this->setCurrentPage(1);
        $this->pages->setLastPage(9);
        $this->first = new FirstPage($this->pages);
        $this->previous = new PreviousPage($this->pages);
        $this->current = new CurrentPage($this->pages);
        $this->number = new NumberPage($this->pages, 8);
        $this->next = new NextPage($this->pages);
        $this->last = new LastPage($this->pages);
    }

    public function testCurrentFirst(): void
    {
        $this->setCurrentPage(1);

        $this->assertSame(1, $this->first->getNumber());
        $this->assertSame(1, $this->previous->getNumber());
        $this->assertSame(8, $this->number->getNumber());
        $this->assertSame(1, $this->current->getNumber());
        $this->assertSame(2, $this->next->getNumber());
        $this->assertSame(9, $this->last->getNumber());

        $this->assertSame('8', $this->number->getLabel());
        $this->assertSame('1', $this->current->getLabel());

        $this->assertFalse($this->first->isCurrent());
        $this->assertFalse($this->previous->isCurrent());
        $this->assertFalse($this->number->isCurrent());
        $this->assertTrue($this->current->isCurrent());
        $this->assertFalse($this->next->isCurrent());
        $this->assertFalse($this->last->isCurrent());

        $this->assertTrue($this->first->isDisable());
        $this->assertTrue($this->previous->isDisable());
        $this->assertFalse($this->number->isDisable());
        $this->assertFalse($this->current->isDisable());
        $this->assertFalse($this->next->isDisable());
        $this->assertFalse($this->last->isDisable());
    }

    public function testCurrentSecond(): void
    {
        $this->setCurrentPage(2);

        $this->assertSame(1, $this->first->getNumber());
        $this->assertSame(1, $this->previous->getNumber());
        $this->assertSame(8, $this->number->getNumber());
        $this->assertSame(2, $this->current->getNumber());
        $this->assertSame(3, $this->next->getNumber());
        $this->assertSame(9, $this->last->getNumber());

        $this->assertSame('8', $this->number->getLabel());
        $this->assertSame('2', $this->current->getLabel());

        $this->assertFalse($this->first->isCurrent());
        $this->assertFalse($this->previous->isCurrent());
        $this->assertFalse($this->number->isCurrent());
        $this->assertTrue($this->current->isCurrent());
        $this->assertFalse($this->next->isCurrent());
        $this->assertFalse($this->last->isCurrent());

        $this->assertFalse($this->first->isDisable());
        $this->assertFalse($this->previous->isDisable());
        $this->assertFalse($this->number->isDisable());
        $this->assertFalse($this->current->isDisable());
        $this->assertFalse($this->next->isDisable());
        $this->assertFalse($this->last->isDisable());
    }

    public function testCurrentBeforeLast(): void
    {
        $this->setCurrentPage(8);

        $this->assertSame(1, $this->first->getNumber());
        $this->assertSame(7, $this->previous->getNumber());
        $this->assertSame(8, $this->number->getNumber());
        $this->assertSame(8, $this->current->getNumber());
        $this->assertSame(9, $this->next->getNumber());
        $this->assertSame(9, $this->last->getNumber());

        $this->assertSame('8', $this->number->getLabel());
        $this->assertSame('8', $this->current->getLabel());

        $this->assertFalse($this->first->isCurrent());
        $this->assertFalse($this->previous->isCurrent());
        $this->assertFalse($this->number->isCurrent());
        $this->assertTrue($this->current->isCurrent());
        $this->assertFalse($this->next->isCurrent());
        $this->assertFalse($this->last->isCurrent());

        $this->assertFalse($this->first->isDisable());
        $this->assertFalse($this->previous->isDisable());
        $this->assertFalse($this->number->isDisable());
        $this->assertFalse($this->current->isDisable());
        $this->assertFalse($this->next->isDisable());
        $this->assertFalse($this->last->isDisable());
    }

    public function testCurrentLast(): void
    {
        $this->setCurrentPage(9);

        $this->assertSame(1, $this->first->getNumber());
        $this->assertSame(8, $this->previous->getNumber());
        $this->assertSame(8, $this->number->getNumber());
        $this->assertSame(9, $this->current->getNumber());
        $this->assertSame(9, $this->next->getNumber());
        $this->assertSame(9, $this->last->getNumber());

        $this->assertSame('8', $this->number->getLabel());
        $this->assertSame('9', $this->current->getLabel());

        $this->assertFalse($this->first->isCurrent());
        $this->assertFalse($this->previous->isCurrent());
        $this->assertFalse($this->number->isCurrent());
        $this->assertTrue($this->current->isCurrent());
        $this->assertFalse($this->next->isCurrent());
        $this->assertFalse($this->last->isCurrent());

        $this->assertFalse($this->first->isDisable());
        $this->assertFalse($this->previous->isDisable());
        $this->assertFalse($this->number->isDisable());
        $this->assertFalse($this->current->isDisable());
        $this->assertTrue($this->next->isDisable());
        $this->assertTrue($this->last->isDisable());
    }

    private function setCurrentPage(int $page): void
    {
        $this->reflectionProperty->setValue($this->pages, $page);
    }
}
